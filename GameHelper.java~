/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package blippy.desktop;

import java.util.*;

import javafx.animation.*;

import javafx.event.*;

import javafx.geometry.Pos;

import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.VBox;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import javafx.scene.text.Text;

import javafx.stage.Stage;
import javafx.stage.StageStyle;

import javafx.util.Duration;

/**
 *
 * @author Jared
 */
public class GameHelper
{
   /**
    * DOCUMENT ME!
    */
   private final Blippy mBlippy;

   /**
    * DOCUMENT ME!
    */
   private final Game mGame;

   /**
    * DOCUMENT ME!
    */
   private final double[] mResults;

   /**
    * DOCUMENT ME!
    */
   private long mStartTime;

   /**
    * DOCUMENT ME!
    */
   private long mEndTime;

   /**
    * DOCUMENT ME!
    */
   private final int mGameIterations;

   /**
    * DOCUMENT ME!
    */
   private Boolean isClicked;

   /**
    * DOCUMENT ME!
    */
   private final EventHandler<ActionEvent> mOnFinished;

   /**
    * DOCUMENT ME!
    */
   private int mCountChanges;

   /**
    * DOCUMENT ME!
    */
   private static final int WAIT_PERIOD = 3000;

   /**
    * DOCUMENT ME!
    */
   private Timeline mTimeline;

   /**
    * NOT YET IMPLEMENTED!!!
    * 
    * this is the timer to "click" if the user doesn't
    * after 5 seconds
    */
   private Timeline clickTimer;

   /**
    * The beep mp3 file.
    */
   private final Media error;

   /**
    * Will play the beep mp3.
    */
   private MediaPlayer mp;

   /**
    *
    * @param pBlippy
    * @param pGame
    */
   public GameHelper(Blippy pBlippy, Game pGame)
   {
      mBlippy = pBlippy;
      mGame = pGame;
      error = new Media(getClass().getResource("error.mp3").toString());
      mp = new MediaPlayer(error);
      mGameIterations = 7;
      mCountChanges   = 0;
      mStartTime      = 0;
      mEndTime        = 0;
      mResults = new double[mGameIterations];
      mOnFinished =
         new EventHandler<ActionEvent>()
            {
               public void handle(ActionEvent e)
               {
                  mGame.setIsReadyToBeClicked(true);
                  mGame.swapCircle();
                  mStartTime = System.nanoTime();
               }
            };
   }

   /**
    *
    * @param pBool
    */
   public void setIsClicked(Boolean pBool)
   {
      isClicked = pBool;
   }

   /**
    * DOCUMENT ME!
    *
    * @return DOCUMENT ME!
    */
   public Boolean isTimelineSet()
   {
      return (mTimeline != null);
   }

   /**
    *
    * @return
    */
   public Boolean getIsClicked()
   {
      return isClicked;
   }
   
   /**
    * 
    * @return 
    */
   public double[] getResults()
   {
       return mResults;
   }

   /**
    * DOCUMENT ME!
    */
   public void killTimeline()
   {
      mTimeline.stop();
      mTimeline = null;
   }

   /**
    * DOCUMENT ME!
    *
    * @param pMessage DOCUMENT ME!
    */
   public synchronized void pauseGame(String pMessage)
   {
      // if they were supposed to click,
      // reset the circle so the timer resets
      if (! mGame.getIsStartCircle())
      {
         mGame.swapCircle();
      }

      // resets the mTimeline
      if (mTimeline != null)
      {
         mTimeline.stop();
      }

      final Stage errorWindow = new Stage(StageStyle.UNDECORATED);

      BorderPane pane = new BorderPane();

      Button btn = new Button("Resume Game");

      btn.setOnAction(new EventHandler<ActionEvent>()
         {
            @Override
            public void handle(ActionEvent event)
            {
               if (mTimeline != null)
               {
                  mTimeline.playFromStart();
               }

               errorWindow.close();
            }
         });

      Text message = new Text(10, 10, pMessage);

      VBox box = new VBox();

      box.getChildren().addAll(message, btn);

      pane.setTop(message);
      pane.setCenter(btn);
      BorderPane.setAlignment(message, Pos.CENTER);

      errorWindow.setScene(new Scene(pane, 300, 150));

      errorWindow.show();
   }

   /**
    * synchronized because the Timeline.stop() method is not
    */
   public synchronized void game()
   {
      // The handler for the circle
      // this is when they click
      EventHandler handler =
         new EventHandler<Event>()
         {
            @Override
            public void handle(Event e)
            {
               // Olny allow if the game is ready
               if (mGame.isReadyToBeClicked())
               {
                  // add time to the list (start timer)
                  mEndTime = System.nanoTime();

                  mResults[mCountChanges - 1] = ((double) mEndTime -
                     mStartTime) / 1000000000;

                  mStartTime = 0;
                  mEndTime = 0;
                  // Set up handler
                  mGame.setIsReadyToBeClicked(false);
                  mGame.swapCircle();
                  // ie. go to game
                  doRandomCircleChange();
               }
               else
               {
                  mp = new MediaPlayer(error);
                  mp.play();

                  pauseGame("Don't click before it changes!");
               }
            }
         };

      mGame.getPane().addEventHandler(MouseEvent.MOUSE_PRESSED, handler);
      mGame.getPane().addEventHandler(KeyEvent.KEY_PRESSED, handler);
      mGame.getPane().requestFocus();

      // Start it off
      doRandomCircleChange();
   }

   /**
    *
    */
   private void doRandomCircleChange()
   {
      // Go through 7 times
      if (mCountChanges++ >= mGameIterations)
      {
         mBlippy.generateResults();
      } // The actual game
      else
      {
         // Timer
         int x = new Random().nextInt(WAIT_PERIOD) + 2000;
         Duration duration = Duration.millis(x);
         KeyFrame keyFrame =
            new KeyFrame(duration, mOnFinished, (KeyValue[]) null);
         mTimeline = new Timeline();
         mTimeline.getKeyFrames().add(keyFrame);
         mTimeline.play();
      }
   }
}
